apply plugin: 'com.android.application'

Properties prop = new Properties()
prop.load(new FileInputStream(file("../signing.properties")))

def versionTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    defaultConfig {
        applicationId "com.lucidastar.mysmallcircle"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "versionCode"
    }


    signingConfigs {
        release {
          keyAlias prop['KEY_ALIAS']
            keyPassword prop['KEY_PASSWORD']
            storeFile file(prop['STORE_FILE'])
            storePassword prop['STORE_PASSWORD']
        }
        debug {
            // 显示Log
            keyAlias prop['KEY_ALIAS']
            keyPassword prop['KEY_PASSWORD']
            storeFile file(prop['STORE_FILE'])
            storePassword prop['STORE_PASSWORD']
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        buildTypes {
            debug {
                minifyEnabled false
                useProguard false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
            }
            release {
                minifyEnabled true
                useProguard true
                // 不显示Log
                buildConfigField "boolean", "LOG_DEBUG", "false"
                //Zipalign优化
                zipAlignEnabled true
                // 移除无用的resource文件
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
                signingConfig signingConfigs.release

               /*applicationVariants.all { variant ->
                   variant.getPackageApplicationProvider().get().outputDirectory = new File(prop['APK_OUT_PATH'] + "/apk/release")
                   variant.getPackageApplicationProvider().get().outputScope.apkDatas.forEach { apkData ->
                       def fileName = "${project.name}_v${defaultConfig.versionName}_${versionTime()}_${variant.productFlavors[0].name}.apk"
                       apkData.outputFileName =  fileName
                   }
                }*/
            }
        }
    }

    flavorDimensions "type" //这个是必须的
    productFlavors {
        apk{
            dimension "type" //并且必须使用这个dimension
        }
        wandoujia {}
        baidu {}
        c360 {}
        uc {}
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

    tasks.whenTaskAdded { task ->
        if (task.name.contains("lint")
                || task.name.equals("clean")
                || task.name.contains("mockableAndroidJar")
                || task.name.contains("UnitTest")
                || task.name.contains("AndroidTest")
        ) {
            task.enabled = false
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies["support-appcompatV7"]
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'

    implementation rootProject.ext.dependencies["rxJaveVersion"]
    implementation rootProject.ext.dependencies["rxAndroidVersion"]
    implementation rootProject.ext.dependencies["retrofit2"]

    implementation rootProject.ext.dependencies["guava"]

//    implementation rootProject.ext.dependencies["lifecycle_runtime"]
//    annotationProcessor rootProject.ext.dependencies["lifecycle_compiler"]
    // 如果用的是java8使用以下的依赖
//    implementation rootProject.ext.dependencies["lifecycle_common_java8"]


    androidTestImplementation rootProject.ext.dependencies["espressoVersion"]

    implementation rootProject.ext.dependencies["umengAnalytics"]
    implementation rootProject.ext.dependencies["umengCommon"]
    //dagger2
    implementation rootProject.ext.dependencies["dagger2"]
    annotationProcessor rootProject.ext.dependencies["dagger2_annotation"]

    implementation rootProject.ext.dependencies["autodispose-android"]
    implementation rootProject.ext.dependencies["autodispose-android-archcomponents"]

    implementation rootProject.ext.dependencies["externalLucidaUtils"]
    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]

    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
//    implementation 'io.reactivex.rxjava2:rxjava:2.1.13'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'



    compileOnly 'org.glassfish:javax.annotation:10.0-b28'
}
